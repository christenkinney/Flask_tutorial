from flask import render_template, flash, redirect, url_for, g, jsonify
from app import app, db
from app.forms import LoginForm, RegistrationForm, EditProfileForm, PostForm, ResetPasswordRequestForm, ResetPasswordForm
from flask_login import current_user, login_user, logout_user, login_required
from app.models import User, Post
from flask import request
from werkzeug.urls import url_parse
from datetime import datetime
from app.email import send_password_reset_email
from flask_babel import _, get_locale
from guess_language import guess_language
from app.translate import translate


@app.before_request
def before_request():
    if current_user.is_authenticated:
        current_user.last_seen = datetime.utcnow()
        db.session.commit()
    g.locale = str(get_locale())

#import the post and postform classes
#accept both post and get requests - to recieve form data
@app.route('/', methods =['GET', 'POST'])
@app.route('/index', methods =['GET', 'POST'])
@login_required
def index():
	#insert a new post record into the database
    form = PostForm()
    if form.validate_on_submit():
        #save language for new posts
        language = guess_language(form.post.data)
        if language == 'UNKNOWN' or len(language) > 5:
            language = ''
        post = Post(body=form.post.data, author=current_user,
            language = language)
        db.session.add(post)
        db.session.commit()
        flash(_('Your post is now live!'))
        #standard practice to respond to a POST request generated by a web form submission
        #with a redirect - if the page is refreshed is will then prompt a GET request from
        #the data that was just submitted instead of resubmitting it
        #POST/REDIRECT/GET pattern 
        return redirect(url_for('index'))
    #followed.posts methods returns a query object that grabs the posts the user is interested
    #in from the db. Calling all() triggeres the execution and will return all of the results

    #update -- followers association table to show amount of posts per page using the 
    #paginate method query

    #requst.args parses the contents of the query string from the get method
    page = request.args.get('page', 1, type=int)
    posts = current_user.followed_posts().paginate(page, app.config['POSTS_PER_PAGE'], False)
    
    #next url/prev url set to a url returned by url for
    #the url_for() function allows for keywords arguments to be added - refered in URL
    #directly or not, Flask will include as query argument
    next_url = url_for('index', page=posts.next_num) \
    	if posts.has_next else None
    prev_url = url_for('index', page=posts.prev_num) \
    	if posts.has_prev else None
    return render_template('index.html', title='Home', form=form,
                           posts=posts.items, next_url=next_url,
                           prev_url=prev_url)


#@app.route('/login', methods=['GET', 'POST'])
#accepting both get a post requests
#def login():
    #form = LoginForm()
    #browser send get request to recieve the web page form,
    #skip the if statement and directly render the template -- GET
    #browser get post request, gather all the data and return true indicating
    #the data is valid and is processed -- POST
    #if form.validate_on_submit():
    	#when returned TRUE, flash() shows a message to the user
    	#if successful or not
        #flash('Login requested for user {}, remember_me={}'.format(
            #form.username.data, form.remember_me.data))
        #redirect() instructs client web browser to navigate to different
        #page
        #return redirect(url_for('index'))
    #return render_template('login.html', title='Sign In', form=form)

@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    form = LoginForm()
    if form.validate_on_submit():
    	#load user from the database, filter by to find username
    	#first() returns only one result
        user = User.query.filter_by(username=form.username.data).first()
        #if username is matched, check password is valid
        if user is None or not user.check_password(form.password.data):
            flash('Invalid username or password')
            return redirect(url_for('login'))
        #if username and password are both correct, register the user as logged in
        login_user(user, remember=form.remember_me.data)
        next_page = request.args.get('next')
        if not next_page or url_parse(next_page).netloc != '':
            next_page = url_for('index')
        return redirect(next_page)
    return render_template('login.html', title='Sign In', form=form)


@app.route('/logout')
def logout():
    logout_user()
    return redirect(url_for('index'))

@app.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    form = RegistrationForm()
    if form.validate_on_submit():
        user = User(username=form.username.data, email=form.email.data)
        user.set_password(form.password.data)
        db.session.add(user)
        db.session.commit()
        flash(_('Congratulations, you are now a registered user!'))
        return redirect(url_for('login'))
    return render_template('register.html', title='Register', form=form)

@app.route('/reset_password_request', methods=['GET', 'POST'])
def reset_password_request():
    #begin by making sure the user is not logged in -- they will get redirected
    #if they are
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    form = ResetPasswordRequestForm()
    #when the forum is submitted -- look up the user by the email provided
    #in the form.
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        #if the user is found, the password reset email is sent
        if user:
            send_password_reset_email(user)
        #a message is flashed to check the email for instructions
        flash(
            _('Check your email for the instructions to reset your password'))
        return redirect(url_for('login'))
    return render_template('reset_password_request.html',
                           title='Reset Password', form=form)

@app.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_password(token):
    #make sure that the user is not logged in
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    #determine who the user is by invoking the token verification in the User class
    user = User.verify_reset_password_token(token)
    if not user:
        #token invalid get redirected to the home page
        return redirect(url_for('index'))
    form = ResetPasswordForm()
    #if token is valid then present the user with a second form - with new password
    #request
    if form.validate_on_submit():
        #invoke set password for user to change the password - redirected to the login page
        user.set_password(form.password.data)
        db.session.commit()
        flash(_('Your password has been reset.'))
        return redirect(url_for('login'))
    return render_template('reset_password.html', form=form)

#When a route has a dynamic component, Flask will accept any text in 
#that portion of the URL. and will invoke the view function with the 
#actual text as an argument

#Pagination in the user profile view function
@app.route('/user/<username>')
@login_required
def user(username):
    user = User.query.filter_by(username=username).first_or_404()
    page = request.args.get('page', 1, type = int)
    #to get a list of posts from the user - use this query and include
    #order by to get the newest posts first
    posts = user.posts.order_by(Post.timestamp.desc()).paginate(
        page, app.config['POSTS_PER_PAGE'], False)
    #need to include the user information since they are pointing back
    #to the user page
    next_url = url_for('user', username=user.username, page=posts.next_num) \
        if posts.has_next else None
    prev_url = url_for('user', username=user.username, page=posts.prev_num) \
        if posts.has_prev else None
    return render_template('user.html', user=user, posts=posts.items,
                           next_url=next_url, prev_url=prev_url)



@app.route('/edit_profile', methods=['GET', 'POST'])
@login_required
def edit_profile():
    form = EditProfileForm(current_user.username)
    if form.validate_on_submit():
        current_user.username = form.username.data
        current_user.about_me = form.about_me.data
        db.session.commit()
        flash(_('Your changes have been saved.'))
        return redirect(url_for('edit_profile'))
    elif request.method == 'GET':
        form.username.data = current_user.username
        form.about_me.data = current_user.about_me
    return render_template('edit_profile.html', title='Edit Profile',
                           form=form)


#follow and unfollow routes -- 
#implementing error checking and useful message to the user when a problem
#occurs 
@app.route('/follow/<username>')
@login_required
def follow(username):
    user = User.query.filter_by(username=username).first()
    if user is None:
        flash(_('User %(username)s not found.', username=username))
        return redirect(url_for('index'))
    if user == current_user:
        flash(_('You cannot follow yourself!'))
        return redirect(url_for('user', username=username))
    current_user.follow(user)
    db.session.commit()
    flash(_('You are following %(username)s!', username=username))
    return redirect(url_for('user', username=username))

@app.route('/unfollow/<username>')
@login_required
def unfollow(username):
    user = User.query.filter_by(username=username).first()
    if user is None:
        flash(_('User %(username)s not found.', username=username))
        return redirect(url_for('index'))
    if user == current_user:
        flash(_('You cannot unfollow yourself!'))
        return redirect(url_for('user', username=username))
    current_user.unfollow(user)
    db.session.commit()
    flash(_('You are not following %(username)s.', username=username))
    return redirect(url_for('user', username=username))

#explore view function
@app.route('/explore')
@login_required
def explore():
    page = request.args.get('page', 1, type=int)
    posts = Post.query.order_by(Post.timestamp.desc()).paginate(page, app.config['POSTS_PER_PAGE'], False)
    #uses index.html to render template -- since it is going to be same as the main
    #page
    #FORM is not included -- users are not allowed to write a blog post, only view
    #therefore it is not included in the template call

    next_url = url_for('explore', page=posts.next_num) \
    	if posts.has_next else None
    prev_url = url_for('explore', page=posts.prev_num) \
    	if posts.has_prev else None
    return render_template("index.html", title='Explore', posts=posts.items,
                          next_url=next_url, prev_url=prev_url)


#text translation view function
#passing the three arguments as done in the translate function
#result is in a single-key dictionary under text
#dictionary passed in jsonify which converts dictionary to JSON
#result gets sent back to the client
@app.route('/translate', methods=['POST'])
@login_required
def translate_text():
    #request.form attribution, a dictionary that Flask exposes with all the data
    #accessing the data directly
    return jsonify({'text': translate(request.form['text'],
                                      request.form['source_language'],
                                      request.form['dest_language'])})
